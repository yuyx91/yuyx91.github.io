<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 在路上</title>
    <link>https://example.com/tags/vue/</link>
    <description>Recent content in Vue on 在路上</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>CN</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/yuyx91&#34;&gt;yuyx91&lt;/a&gt; 2018</copyright>
    <lastBuildDate>Tue, 25 Apr 2017 16:54:40 +0000</lastBuildDate>
    
	<atom:link href="https://example.com/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vuex简单理解</title>
      <link>https://example.com/posts/vuex%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 25 Apr 2017 16:54:40 +0000</pubDate>
      
      <guid>https://example.com/posts/vuex%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</guid>
      <description>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。 简而言之：Vuex 相当于某种意义上设置了读写权限的全局变量，将数据保存保存到该“全局变量”下，并通过一定的方法去读写数据。 Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：
 应用层级的状态应该集中到单个 store 对象中。
 提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。
 异步逻辑都应该封装到 action 里面。
  对于大型应用我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：
 ├── index.html ├── main.js ├── api │ └── ... # 抽取出API请求 ├── components │ ├── App.vue │ └── ... └── store ├── index.js # 我们组装模块并导出 store 的地方 └── moving # 电影模块 ├── index.js # 模块内组装，并导出模块的地方 ├── actions.</description>
    </item>
    
  </channel>
</rss>